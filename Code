<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>E-Commerce Database Management</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #2c3e50, #3498db);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .controls {
            padding: 30px;
            background: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
        }

        .control-row {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
            align-items: center;
        }

        .control-group {
            display: flex;
            flex-direction: column;
            min-width: 200px;
        }

        .control-group label {
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 5px;
            font-size: 0.9rem;
        }

        select, input, button {
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        select:focus, input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

        button {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            border: none;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(52, 152, 219, 0.3);
        }

        .btn-success {
            background: linear-gradient(135deg, #27ae60, #2ecc71);
        }

        .btn-danger {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
        }

        .btn-warning {
            background: linear-gradient(135deg, #f39c12, #e67e22);
        }

        .table-container {
            padding: 30px;
            overflow-x: auto;
        }

        .table-tabs {
            display: flex;
            gap: 5px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .tab-btn {
            padding: 12px 20px;
            background: #ecf0f1;
            border: none;
            border-radius: 8px 8px 0 0;
            cursor: pointer;
            font-weight: 600;
            color: #2c3e50;
            transition: all 0.3s ease;
        }

        .tab-btn.active {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }

        th {
            background: linear-gradient(135deg, #34495e, #2c3e50);
            color: white;
            padding: 15px 12px;
            text-align: left;
            font-weight: 600;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        td {
            padding: 12px;
            border-bottom: 1px solid #ecf0f1;
            font-size: 0.9rem;
        }

        tr:hover {
            background-color: rgba(52, 152, 219, 0.05);
        }

        .status-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-active { background: #d5f4e6; color: #27ae60; }
        .status-pending { background: #fef9e7; color: #f39c12; }
        .status-shipped { background: #e8f4f8; color: #3498db; }
        .status-delivered { background: #d5f4e6; color: #27ae60; }
        .status-cancelled { background: #fadbd8; color: #e74c3c; }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(135deg, #fff, #f8f9fa);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            border-left: 5px solid #3498db;
        }

        .stat-title {
            font-size: 0.9rem;
            color: #7f8c8d;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: #2c3e50;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .search-box {
            background: white;
            border-radius: 25px;
            padding: 12px 20px;
            border: 2px solid #e9ecef;
            width: 300px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .action-buttons {
            display: flex;
            gap: 10px;
        }

        @media (max-width: 768px) {
            .control-row {
                flex-direction: column;
                align-items: stretch;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .search-box {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸ›’ E-Commerce Database Management</h1>
            <p>Comprehensive database system for managing products, customers, orders, and inventory</p>
        </div>

        <div class="controls">
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-title">Total Products</div>
                    <div class="stat-value" id="totalProducts">0</div>
                </div>
                <div class="stat-card">
                    <div class="stat-title">Total Customers</div>
                    <div class="stat-value" id="totalCustomers">0</div>
                </div>
                <div class="stat-card">
                    <div class="stat-title">Total Orders</div>
                    <div class="stat-value" id="totalOrders">0</div>
                </div>
                <div class="stat-card">
                    <div class="stat-title">Total Revenue</div>
                    <div class="stat-value" id="totalRevenue">$0</div>
                </div>
            </div>

            <div class="control-row">
                <div class="control-group">
                    <label>Search Database</label>
                    <input type="text" id="searchInput" class="search-box" placeholder="Search products, customers, orders...">
                </div>
                <div class="control-group">
                    <label>Filter by Category</label>
                    <select id="categoryFilter">
                        <option value="">All Categories</option>
                    </select>
                </div>
                <div class="control-group">
                    <label>Filter by Status</label>
                    <select id="statusFilter">
                        <option value="">All Statuses</option>
                        <option value="active">Active</option>
                        <option value="pending">Pending</option>
                        <option value="shipped">Shipped</option>
                        <option value="delivered">Delivered</option>
                        <option value="cancelled">Cancelled</option>
                    </select>
                </div>
                <div class="control-group">
                    <label>Actions</label>
                    <div class="action-buttons">
                        <button onclick="addSampleData()" class="btn-success">Add Sample Data</button>
                        <button onclick="clearAllData()" class="btn-danger">Clear All</button>
                        <button onclick="exportData()" class="btn-warning">Export Data</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="table-container">
            <div class="table-tabs">
                <button class="tab-btn active" onclick="showTab('products')">Products</button>
                <button class="tab-btn" onclick="showTab('customers')">Customers</button>
                <button class="tab-btn" onclick="showTab('orders')">Orders</button>
                <button class="tab-btn" onclick="showTab('categories')">Categories</button>
                <button class="tab-btn" onclick="showTab('inventory')">Inventory</button>
            </div>

            <div id="products" class="tab-content active">
                <table id="productsTable">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Category</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Rating</th>
                            <th>Status</th>
                            <th>Added Date</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>

            <div id="customers" class="tab-content">
                <table id="customersTable">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th>City</th>
                            <th>Country</th>
                            <th>Total Orders</th>
                            <th>Total Spent</th>
                            <th>Join Date</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>

            <div id="orders" class="tab-content">
                <table id="ordersTable">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Products</th>
                            <th>Total Amount</th>
                            <th>Status</th>
                            <th>Payment Method</th>
                            <th>Order Date</th>
                            <th>Delivery Date</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>

            <div id="categories" class="tab-content">
                <table id="categoriesTable">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Product Count</th>
                            <th>Total Revenue</th>
                            <th>Created Date</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>

            <div id="inventory" class="tab-content">
                <table id="inventoryTable">
                    <thead>
                        <tr>
                            <th>Product ID</th>
                            <th>Product Name</th>
                            <th>SKU</th>
                            <th>Current Stock</th>
                            <th>Reorder Level</th>
                            <th>Supplier</th>
                            <th>Last Restocked</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
        // Database structure
        let database = {
            products: [],
            customers: [],
            orders: [],
            categories: [],
            inventory: []
        };

        // Sample data generator
        function generateSampleData() {
            // Categories
            const categories = [
                { id: 1, name: 'Electronics', description: 'Electronic devices and gadgets', productCount: 0, totalRevenue: 0, createdDate: '2024-01-15' },
                { id: 2, name: 'Clothing', description: 'Fashion and apparel', productCount: 0, totalRevenue: 0, createdDate: '2024-01-16' },
                { id: 3, name: 'Home & Garden', description: 'Home improvement and gardening', productCount: 0, totalRevenue: 0, createdDate: '2024-01-17' },
                { id: 4, name: 'Sports', description: 'Sports and fitness equipment', productCount: 0, totalRevenue: 0, createdDate: '2024-01-18' },
                { id: 5, name: 'Books', description: 'Books and educational materials', productCount: 0, totalRevenue: 0, createdDate: '2024-01-19' }
            ];

            // Products
            const products = [
                { id: 1, name: 'Wireless Headphones', categoryId: 1, price: 199.99, stock: 45, rating: 4.5, status: 'active', addedDate: '2024-02-01' },
                { id: 2, name: 'Cotton T-Shirt', categoryId: 2, price: 29.99, stock: 120, rating: 4.2, status: 'active', addedDate: '2024-02-02' },
                { id: 3, name: 'Garden Hose', categoryId: 3, price: 49.99, stock: 30, rating: 4.0, status: 'active', addedDate: '2024-02-03' },
                { id: 4, name: 'Basketball', categoryId: 4, price: 24.99, stock: 80, rating: 4.7, status: 'active', addedDate: '2024-02-04' },
                { id: 5, name: 'Programming Guide', categoryId: 5, price: 39.99, stock: 25, rating: 4.8, status: 'active', addedDate: '2024-02-05' },
                { id: 6, name: 'Smartphone', categoryId: 1, price: 699.99, stock: 15, rating: 4.6, status: 'active', addedDate: '2024-02-06' },
                { id: 7, name: 'Jeans', categoryId: 2, price: 79.99, stock: 60, rating: 4.3, status: 'active', addedDate: '2024-02-07' },
                { id: 8, name: 'Plant Pot', categoryId: 3, price: 19.99, stock: 40, rating: 4.1, status: 'active', addedDate: '2024-02-08' },
                { id: 9, name: 'Tennis Racket', categoryId: 4, price: 129.99, stock: 20, rating: 4.4, status: 'active', addedDate: '2024-02-09' },
                { id: 10, name: 'Cookbook', categoryId: 5, price: 24.99, stock: 35, rating: 4.6, status: 'active', addedDate: '2024-02-10' }
            ];

            // Customers
            const customers = [
                { id: 1, name: 'John Smith', email: 'john.smith@email.com', phone: '+1-555-0101', city: 'New York', country: 'USA', totalOrders: 0, totalSpent: 0, joinDate: '2024-01-20' },
                { id: 2, name: 'Emma Johnson', email: 'emma.j@email.com', phone: '+1-555-0102', city: 'Los Angeles', country: 'USA', totalOrders: 0, totalSpent: 0, joinDate: '2024-01-21' },
                { id: 3, name: 'Michael Brown', email: 'm.brown@email.com', phone: '+44-20-7946-0958', city: 'London', country: 'UK', totalOrders: 0, totalSpent: 0, joinDate: '2024-01-22' },
                { id: 4, name: 'Sarah Davis', email: 'sarah.davis@email.com', phone: '+1-555-0104', city: 'Chicago', country: 'USA', totalOrders: 0, totalSpent: 0, joinDate: '2024-01-23' },
                { id: 5, name: 'David Wilson', email: 'd.wilson@email.com', phone: '+1-555-0105', city: 'Houston', country: 'USA', totalOrders: 0, totalSpent: 0, joinDate: '2024-01-24' },
                { id: 6, name: 'Lisa Anderson', email: 'lisa.a@email.com', phone: '+61-2-9876-5432', city: 'Sydney', country: 'Australia', totalOrders: 0, totalSpent: 0, joinDate: '2024-01-25' },
                { id: 7, name: 'Robert Taylor', email: 'r.taylor@email.com', phone: '+1-555-0107', city: 'Phoenix', country: 'USA', totalOrders: 0, totalSpent: 0, joinDate: '2024-01-26' },
                { id: 8, name: 'Maria Garcia', email: 'maria.g@email.com', phone: '+34-91-123-4567', city: 'Madrid', country: 'Spain', totalOrders: 0, totalSpent: 0, joinDate: '2024-01-27' },
                { id: 9, name: 'James Miller', email: 'j.miller@email.com', phone: '+1-555-0109', city: 'Philadelphia', country: 'USA', totalOrders: 0, totalSpent: 0, joinDate: '2024-01-28' },
                { id: 10, name: 'Jennifer Lee', email: 'jen.lee@email.com', phone: '+1-555-0110', city: 'San Antonio', country: 'USA', totalOrders: 0, totalSpent: 0, joinDate: '2024-01-29' }
            ];

            // Orders
            const orders = [
                { id: 'ORD-001', customerId: 1, products: [1, 6], totalAmount: 899.98, status: 'delivered', paymentMethod: 'Credit Card', orderDate: '2024-02-15', deliveryDate: '2024-02-18' },
                { id: 'ORD-002', customerId: 2, products: [2, 7], totalAmount: 109.98, status: 'shipped', paymentMethod: 'PayPal', orderDate: '2024-02-16', deliveryDate: '2024-02-20' },
                { id: 'ORD-003', customerId: 3, products: [3, 8], totalAmount: 69.98, status: 'pending', paymentMethod: 'Credit Card', orderDate: '2024-02-17', deliveryDate: null },
                { id: 'ORD-004', customerId: 4, products: [4, 9], totalAmount: 154.98, status: 'delivered', paymentMethod: 'Debit Card', orderDate: '2024-02-18', deliveryDate: '2024-02-21' },
                { id: 'ORD-005', customerId: 5, products: [5, 10], totalAmount: 64.98, status: 'shipped', paymentMethod: 'Credit Card', orderDate: '2024-02-19', deliveryDate: '2024-02-23' },
                { id: 'ORD-006', customerId: 6, products: [1, 2, 3], totalAmount: 279.97, status: 'delivered', paymentMethod: 'PayPal', orderDate: '2024-02-20', deliveryDate: '2024-02-23' },
                { id: 'ORD-007', customerId: 7, products: [6, 7, 8], totalAmount: 799.97, status: 'cancelled', paymentMethod: 'Credit Card', orderDate: '2024-02-21', deliveryDate: null },
                { id: 'ORD-008', customerId: 8, products: [4, 5], totalAmount: 64.98, status: 'pending', paymentMethod: 'Debit Card', orderDate: '2024-02-22', deliveryDate: null },
                { id: 'ORD-009', customerId: 9, products: [9, 10], totalAmount: 154.98, status: 'shipped', paymentMethod: 'Credit Card', orderDate: '2024-02-23', deliveryDate: '2024-02-27' },
                { id: 'ORD-010', customerId: 10, products: [1, 5, 9], totalAmount: 369.97, status: 'delivered', paymentMethod: 'PayPal', orderDate: '2024-02-24', deliveryDate: '2024-02-27' }
            ];

            // Inventory
            const inventory = [
                { productId: 1, sku: 'WH-001', currentStock: 45, reorderLevel: 10, supplier: 'Tech Supplies Inc', lastRestocked: '2024-02-01', status: 'In Stock' },
                { productId: 2, sku: 'CT-002', currentStock: 120, reorderLevel: 20, supplier: 'Fashion World', lastRestocked: '2024-02-02', status: 'In Stock' },
                { productId: 3, sku: 'GH-003', currentStock: 30, reorderLevel: 15, supplier: 'Garden Plus', lastRestocked: '2024-02-03', status: 'In Stock' },
                { productId: 4, sku: 'BB-004', currentStock: 80, reorderLevel: 25, supplier: 'Sports Direct', lastRestocked: '2024-02-04', status: 'In Stock' },
                { productId: 5, sku: 'PG-005', currentStock: 25, reorderLevel: 5, supplier: 'Book World', lastRestocked: '2024-02-05', status: 'In Stock' },
                { productId: 6, sku: 'SP-006', currentStock: 15, reorderLevel: 8, supplier: 'Mobile Tech', lastRestocked: '2024-02-06', status: 'Low Stock' },
                { productId: 7, sku: 'JN-007', currentStock: 60, reorderLevel: 15, supplier: 'Fashion World', lastRestocked: '2024-02-07', status: 'In Stock' },
                { productId: 8, sku: 'PP-008', currentStock: 40, reorderLevel: 10, supplier: 'Garden Plus', lastRestocked: '2024-02-08', status: 'In Stock' },
                { productId: 9, sku: 'TR-009', currentStock: 20, reorderLevel: 5, supplier: 'Sports Direct', lastRestocked: '2024-02-09', status: 'In Stock' },
                { productId: 10, sku: 'CB-010', currentStock: 35, reorderLevel: 8, supplier: 'Book World', lastRestocked: '2024-02-10', status: 'In Stock' }
            ];

            return { categories, products, customers, orders, inventory };
        }

        // Initialize database with sample data
        function addSampleData() {
            const sampleData = generateSampleData();
            database = sampleData;
            
            // Update category product counts and revenue
            updateCategoryStats();
            updateCustomerStats();
            
            renderAllTables();
            updateStats();
            populateFilters();
        }

        function updateCategoryStats() {
            database.categories.forEach(category => {
                const categoryProducts = database.products.filter(p => p.categoryId === category.id);
                category.productCount = categoryProducts.length;
                
                // Calculate revenue from orders
                let revenue = 0;
                database.orders.forEach(order => {
                    if (order.status !== 'cancelled') {
                        order.products.forEach(productId => {
                            const product = database.products.find(p => p.id === productId);
                            if (product && product.categoryId === category.id) {
                                revenue += product.price;
                            }
                        });
                    }
                });
                category.totalRevenue = revenue;
            });
        }

        function updateCustomerStats() {
            database.customers.forEach(customer => {
                const customerOrders = database.orders.filter(o => o.customerId === customer.id);
                customer.totalOrders = customerOrders.length;
                customer.totalSpent = customerOrders
                    .filter(o => o.status !== 'cancelled')
                    .reduce((sum, order) => sum + order.totalAmount, 0);
            });
        }

        // Render tables
        function renderTable(tableId, data, columns) {
            const tbody = document.querySelector(`#${tableId} tbody`);
            tbody.innerHTML = '';
            
            data.forEach(item => {
                const row = tbody.insertRow();
                columns.forEach(column => {
                    const cell = row.insertCell();
                    let value = item[column.key];
                    
                    if (column.format) {
                        value = column.format(value, item);
                    }
                    
                    cell.innerHTML = value;
                });
            });
        }

        function renderAllTables() {
            // Products table
            renderTable('productsTable', database.products, [
                { key: 'id' },
                { key: 'name' },
                { key: 'categoryId', format: (val) => {
                    const category = database.categories.find(c => c.id === val);
                    return category ? category.name : 'Unknown';
                }},
                { key: 'price', format: (val) => `$${val.toFixed(2)}` },
                { key: 'stock' },
                { key: 'rating', format: (val) => `${val}/5` },
                { key: 'status', format: (val) => `<span class="status-badge status-${val}">${val}</span>` },
                { key: 'addedDate' }
            ]);

            // Customers table
            renderTable('customersTable', database.customers, [
                { key: 'id' },
                { key: 'name' },
                { key: 'email' },
                { key: 'phone' },
                { key: 'city' },
                { key: 'country' },
                { key: 'totalOrders' },
                { key: 'totalSpent', format: (val) => `$${val.toFixed(2)}` },
                { key: 'joinDate' }
            ]);

            // Orders table
            renderTable('ordersTable', database.orders, [
                { key: 'id' },
                { key: 'customerId', format: (val) => {
                    const customer = database.customers.find(c => c.id === val);
                    return customer ? customer.name : 'Unknown';
                }},
                { key: 'products', format: (val) => {
                    return val.map(id => {
                        const product = database.products.find(p => p.id === id);
                        return product ? product.name : 'Unknown';
                    }).join(', ');
                }},
                { key: 'totalAmount', format: (val) => `$${val.toFixed(2)}` },
                { key: 'status', format: (val) => `<span class="status-badge status-${val}">${val}</span>` },
                { key: 'paymentMethod' },
                { key: 'orderDate' },
                { key: 'deliveryDate', format: (val) => val || 'Pending' }
            ]);

            // Categories table
            renderTable('categoriesTable', database.categories, [
                { key: 'id' },
                { key: 'name' },
                { key: 'description' },
                { key: 'productCount' },
                { key: 'totalRevenue', format: (val) => `$${val.toFixed(2)}` },
                { key: 'createdDate' }
            ]);

            // Inventory table
            renderTable('inventoryTable', database.inventory, [
                { key: 'productId' },
                { key: 'productId', format: (val) => {
                    const product = database.products.find(p => p.id === val);
                    return product ? product.name : 'Unknown';
                }},
                { key: 'sku' },
                { key: 'currentStock' },
                { key: 'reorderLevel' },
                { key: 'supplier' },
                { key: 'lastRestocked' },
                { key: 'status', format: (val) => {
                    const statusClass = val === 'Low Stock' ? 'status-pending' : 'status-active';
                    return `<span class="status-badge ${statusClass}">${val}</span>`;
                }}
            ]);
        }

        // Tab functionality
        function showTab(tabName) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Remove active class from all tab buttons
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Show selected tab and mark button as active
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
        }

        // Statistics
        function updateStats() {
            document.getElementById('totalProducts').textContent = database.products.length;
            document.getElementById('totalCustomers').textContent = database.customers.length;
            document.getElementById('totalOrders').textContent = database.orders.length;
            
            const totalRevenue = database.orders
                .filter(order => order.status !== 'cancelled')
                .reduce((sum, order) => sum + order.totalAmount, 0);
            document.getElementById('totalRevenue').textContent = `${totalRevenue.toFixed(2)}`;
        }

        // Populate filter dropdowns
        function populateFilters() {
            const categoryFilter = document.getElementById('categoryFilter');
            categoryFilter.innerHTML = '<option value="">All Categories</option>';
            
            database.categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category.name;
                option.textContent = category.name;
                categoryFilter.appendChild(option);
            });
        }

        // Search and filter functionality
        function setupFilters() {
            const searchInput = document.getElementById('searchInput');
            const categoryFilter = document.getElementById('categoryFilter');
            const statusFilter = document.getElementById('statusFilter');

            function applyFilters() {
                const searchTerm = searchInput.value.toLowerCase();
                const selectedCategory = categoryFilter.value;
                const selectedStatus = statusFilter.value;

                // Filter products
                let filteredProducts = database.products.filter(product => {
                    const matchesSearch = product.name.toLowerCase().includes(searchTerm) ||
                                        product.id.toString().includes(searchTerm);
                    const category = database.categories.find(c => c.id === product.categoryId);
                    const matchesCategory = !selectedCategory || (category && category.name === selectedCategory);
                    const matchesStatus = !selectedStatus || product.status === selectedStatus;
                    
                    return matchesSearch && matchesCategory && matchesStatus;
                });

                // Filter customers
                let filteredCustomers = database.customers.filter(customer => {
                    return customer.name.toLowerCase().includes(searchTerm) ||
                           customer.email.toLowerCase().includes(searchTerm) ||
                           customer.city.toLowerCase().includes(searchTerm);
                });

                // Filter orders
                let filteredOrders = database.orders.filter(order => {
                    const customer = database.customers.find(c => c.id === order.customerId);
                    const matchesSearch = order.id.toLowerCase().includes(searchTerm) ||
                                        (customer && customer.name.toLowerCase().includes(searchTerm));
                    const matchesStatus = !selectedStatus || order.status === selectedStatus;
                    
                    return matchesSearch && matchesStatus;
                });

                // Re-render tables with filtered data
                renderTable('productsTable', filteredProducts, [
                    { key: 'id' },
                    { key: 'name' },
                    { key: 'categoryId', format: (val) => {
                        const category = database.categories.find(c => c.id === val);
                        return category ? category.name : 'Unknown';
                    }},
                    { key: 'price', format: (val) => `${val.toFixed(2)}` },
                    { key: 'stock' },
                    { key: 'rating', format: (val) => `${val}/5` },
                    { key: 'status', format: (val) => `<span class="status-badge status-${val}">${val}</span>` },
                    { key: 'addedDate' }
                ]);

                renderTable('customersTable', filteredCustomers, [
                    { key: 'id' },
                    { key: 'name' },
                    { key: 'email' },
                    { key: 'phone' },
                    { key: 'city' },
                    { key: 'country' },
                    { key: 'totalOrders' },
                    { key: 'totalSpent', format: (val) => `${val.toFixed(2)}` },
                    { key: 'joinDate' }
                ]);

                renderTable('ordersTable', filteredOrders, [
                    { key: 'id' },
                    { key: 'customerId', format: (val) => {
                        const customer = database.customers.find(c => c.id === val);
                        return customer ? customer.name : 'Unknown';
                    }},
                    { key: 'products', format: (val) => {
                        return val.map(id => {
                            const product = database.products.find(p => p.id === id);
                            return product ? product.name : 'Unknown';
                        }).join(', ');
                    }},
                    { key: 'totalAmount', format: (val) => `${val.toFixed(2)}` },
                    { key: 'status', format: (val) => `<span class="status-badge status-${val}">${val}</span>` },
                    { key: 'paymentMethod' },
                    { key: 'orderDate' },
                    { key: 'deliveryDate', format: (val) => val || 'Pending' }
                ]);
            }

            searchInput.addEventListener('input', applyFilters);
            categoryFilter.addEventListener('change', applyFilters);
            statusFilter.addEventListener('change', applyFilters);
        }

        // Clear all data
        function clearAllData() {
            if (confirm('Are you sure you want to clear all data? This action cannot be undone.')) {
                database = {
                    products: [],
                    customers: [],
                    orders: [],
                    categories: [],
                    inventory: []
                };
                renderAllTables();
                updateStats();
                populateFilters();
            }
        }

        // Export data
        function exportData() {
            const dataStr = JSON.stringify(database, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'ecommerce_database_export.json';
            link.click();
            URL.revokeObjectURL(url);
        }

        // Initialize the application
        function init() {
            addSampleData();
            setupFilters();
            
            // Add some animation effects
            setTimeout(() => {
                document.querySelectorAll('.stat-card').forEach((card, index) => {
                    card.style.animation = `fadeInUp 0.6s ease forwards ${index * 0.1}s`;
                });
            }, 100);
        }

        // CSS animations
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeInUp {
                from {
                    opacity: 0;
                    transform: translateY(30px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }
            
            .stat-card {
                opacity: 0;
            }
            
            table tbody tr {
                transition: all 0.3s ease;
            }
            
            .tab-btn {
                transition: all 0.3s ease;
            }
            
            .tab-btn:hover {
                background: #bdc3c7;
                transform: translateY(-2px);
            }
            
            .control-group input:focus,
            .control-group select:focus {
                transform: translateY(-2px);
            }
        `;
        document.head.appendChild(style);

        // Start the application
        window.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>
